name: Create Release on APP_VERSION change

on:
    push:
        branches:
            - main

jobs:
    create_release:
        runs-on: ubuntu-latest
        steps:
            - name: Check out the repository
              uses: actions/checkout@v3

            - name: Set up Python
              uses: actions/setup-python@v4
              with:
                  python-version: "3.x"

            # Extract the new version from your Python file
            - name: Get new APP_VERSION
              id: get_new_version
              run: |
                  import re
                  import sys

                  with open("main.py", "r") as f:
                      content = f.read()

                  match = re.search(r'APP_VERSION\s*=\s*"([^"]+)"', content)
                  if not match:
                      print("Could not find APP_VERSION in main.py.")
                      sys.exit(1)

                  version = match.group(1)
                  print(f"::set-output name=version::{version}")

            # Check if APP_VERSION changed in the last commit
            # We'll look for "APP_VERSION" in the diff; if it's found, we assume a change occurred.
            - name: Check diff for version change
              id: diff_check
              run: |
                  set -e
                  git fetch --depth=2 origin main
                  DIFF_OUTPUT=$(git diff HEAD^ HEAD -- main.py | grep 'APP_VERSION' || true)
                  if [ -z "$DIFF_OUTPUT" ]; then
                    echo "No APP_VERSION changes found in the last commit."
                    echo "::set-output name=changed::false"
                  else
                    echo "APP_VERSION change detected."
                    echo "::set-output name=changed::true"
                  fi

            # Create a new release only if the version actually changed
            - name: Create GitHub Release
              if: steps.diff_check.outputs.changed == 'true'
              uses: actions/create-release@v1
              with:
                  tag_name: v${{ steps.get_new_version.outputs.version }}
                  release_name: ${{ steps.get_new_version.outputs.version }}
                  body: "Automatic release triggered by a change in APP_VERSION."
                  draft: false
                  prerelease: false
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
